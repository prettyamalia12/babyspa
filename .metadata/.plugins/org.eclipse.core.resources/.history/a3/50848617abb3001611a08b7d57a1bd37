package com.example.babyspa;

import java.util.ArrayList;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

public class postlist extends Activity{

	private String TAG = postlist.class.getSimpleName(); 
	 
 	private ProgressDialog pDialog;  	
 	private ListView lv;  	
 	private Button btnNew; 
 	private String [] arrayItem = {staticbaby.UPDATE, staticbaby.DELETE}; 
 	 
 	ArrayList<post> listContact = new ArrayList<post>(); 
 	 
 	@Override 
 	protected void onCreate(Bundle savedInstanceState) {  	 	
 		super.onCreate(savedInstanceState); 
 	 	setContentView(R.layout.postlist); 
 	 	 
 	 	lv = (ListView) findViewById(R.id.list);  	 	
 	 	btnNew = (Button) findViewById(R.id.addpost); 
 	 	 
 	 	// Add new contact  
 	 	btnNew.setOnClickListener(new OnClickListener() { 
 	 	 	 
 	 	 	@Override 
 	 	 	public void onClick(View v) { 
 	 	 	 	Intent iNew = new Intent(postlist.this, addpost.class); 
 	 	 	 	finish(); 
 	 	 	 	startActivity(iNew); 
 	 	 	} 
 	 	}); 
 	 	 
 	 	// Load contacts  	 	
 	 	new GetContacts().execute(); 
 	 	 
 	 	// Show dialog for Update/Delete contact 
 	 	 	lv.setOnItemLongClickListener(new OnItemLongClickListener() { 
 
 	 	 	 
 	 	 	public boolean onItemLongClick(AdapterView<?> parent, View v, int position, long id) {
 	 	 		AlertDialog.Builder dialogItem = new 
 	 	 				AlertDialog.Builder(postlist.this); 
 	 	 	 	 	final post post = listContact.get(position); 
 	 	 	 	 	dialogItem.setTitle(post.getjudul()); 
 	 	 	 	 	 
 	 	 	 	 	final ArrayAdapter<String> adapter = new 
ArrayAdapter<String>(postlist.this, android.R.layout.simple_list_item_1, arrayItem); 
     dialogItem.setAdapter(adapter, new DialogInterface.OnClickListener() 
{ 
 	 	 	 	 	 	 
 	 	 	 	 	 	@Override 
      public void onClick(DialogInterface dialog, int positionDialog) { 
if (adapter.getItem(positionDialog).equals(staticbaby.UPDATE)) {
	 Intent iEdit = new Intent(postlist.this, editpost.class); 
	 iEdit.putExtra(staticbaby.postid, post.getpostid()); 
	 iEdit.putExtra(staticbaby.judul, post.getjudul()); 
	 iEdit.putExtra(staticbaby.isi, post.getisi());  
	 postlist.this.finish(); 
	 startActivity(iEdit); 
 	 	 	 	 	 	 	} else { 
 	 	 	 	 	 	 	 	new DeleteContact().execute(post); 
 	 	 	 	 	 	 	} 
 	 	 	 	 	 	 	 
 	 	 	 	 	 	} 	 	 	 	 
 	 	 	 	 	}).show();  	 	 	 	 	return false; 
 	 	 	 	} 
 	 	 	}); 
 	 	 
 	 	 
 	} 
 
 	/** 
 * Async task class to get json by making HTTP call 
 */ 
private class GetContacts extends AsyncTask<Void, Void, Void> { 
@Override 
protected void onPreExecute() {  	super.onPreExecute(); 
 	// Showing progress dialog  	 	pDialog = new ProgressDialog(MainActivity.this);  	pDialog.setMessage("Please wait..."); 
 	 	 	pDialog.setCancelable(false);  	 	 	pDialog.show(); 
 
 	 	} 
 
 	 	@Override 
 	 	protected Void doInBackground(Void... params) { 
 	 	 	HttpHandler sh = new HttpHandler(); 
 
 	 	 	// Making a request to url and getting response 
 	 	 	String jsonStr = sh.callJson(); 
 
 	 	 	if (jsonStr != null) { 
 	 	 	 	try { 
 	 	 	 	 	JSONObject jsonObj = new JSONObject(jsonStr); 
 
 	 	 	 	 	// Getting JSON Array node 
     JSONArray contacts = jsonObj.getJSONArray(Static.CONTACT); 
 	 	 	 	 	if (!contacts.getJSONObject(0).equals(Static.EMPTY)) { 
 	 	 	 	 	 	// looping through All Contacts 
 	 	 	 	 	 	for (int i = 0; i < contacts.length(); i++) {  	 	 	 	 	 	 	JSONObject c = contacts.getJSONObject(i); 
 	 	 	 	 	 	 	Contact contact = new Contact(); 
 
 	 	 	 	 	 	 	contact.setId(c.getString(Static.ID));  	 	 	 	 	 	 	contact.setName(c.getString(Static.NAME));  	 	 	 	 	 	 	contact.setEmail(c.getString(Static.EMAIL)); 
       contact.setMobile(c.getString(Static.MOBILE)); 
 	 	 	 	 	 	 	 
 	 	 	 	 	 	 	// adding contact to contact list 
 	 	 	 	 	 	 	listContact.add(contact); 
 	 	 	 	 	 	} 
 	 	 	 	 	}  
 	 	 	 	} catch (final JSONException e) { 
 	 	 	 	Log.e(TAG, "Json parsing error: " + e.getMessage()); 
 	 	 	} 
 	 	} else { 
 	 	 	Log.e(TAG, "Couldn't get json from server."); 
runOnUiThread(new Runnable() { 
 	 	 	@Override 
 	 	 	public void run() { 
 	 	 	 	Toast.makeText(  	 	 	 	 	 	 	getApplicationContext(), 
 	 	 	 	 	 	"Couldn't get json from server. Check LogCat 
for possible errors!", 
 	 	 	 	 	 	 	 	Toast.LENGTH_LONG).show(); 
 	 	 	 	 	} 
 	 	 	 	}); 
 
 	 	 	} 
 
 	 	 	return null; 
 	 	} 
 
 	 	@Override 
 	 	protected void onPostExecute(Void result) {  	 	 	super.onPostExecute(result);  	 	 	// Dismiss the progress dialog  	 	 	if (pDialog.isShowing()) 
 	 	 	 	pDialog.dismiss(); 
 	 	 	/** 
*	Updating parsed JSON data into ListView 
*	*/ 
 	 	 	if (listContact.size() > 0) { 
 	 	 	 	Adapter adapter = new Adapter(getApplicationContext(), listContact); 
 	 	 	 	lv.setAdapter(adapter); 
 	 	 	} else { 
 	 	 	 	tvEmpty.setText("Table is Empty"); 
 	 	 	} 
 	 	} 
 
 	} 
 	 
 	/** 
*	Async task class to send json  
 	 */ 
 	private class DeleteContact extends AsyncTask<Contact, Void, String> { 
 
 	@Override 
 	protected void onPreExecute() {  	 	super.onPreExecute();  	 	// Showing progress dialog pDialog = new ProgressDialog(MainActivity.this); 
 	pDialog.setMessage("Deleting a data...");  	pDialog.setCancelable(false);  	pDialog.show(); 
} 
 	 	 
 	 	@Override 
 	 	protected String doInBackground(Contact... contacts) { 
 	 	 	 
 	 	 	Contact contact = contacts[0]; 
 	 	 	String result = "";  	 	 	 
 	 	 	try { 
 	 	 	 	HttpHandler sj = new HttpHandler(); 
    JSONObject resObj = new JSONObject(sj.sendJson(HttpHandler. MYURL + 
HttpHandler.DELETE, contact)); 
 	 	 	 	JSONArray resArr = resObj.getJSONArray(Static.POSTS); 
 	 	 	 	result = resArr.getString(0); 
 	 	 	} catch (JSONException e) { 
 	 	 	 	Log.i(TAG, "JSON parse error " + e.getMessage()); 
 	 	 	} 
 	 	 	 
 	 	 	return result; 
 	 	} 
 	 	 
 	 	@Override 
 	 	protected void onPostExecute(String result) {  	 	 	super.onPostExecute(result);  	 	 	// Dismiss the progress dialog  	 	 	if (pDialog.isShowing()) 
 	 	 	 	pDialog.dismiss(); 
 	 	 	 
 	 	 	Log.d(TAG, result); 
 	 	 	/** 
*	Show insert information 
*	*/ 
 	 	 	if (result.equals(Static.SUCCESS)) { 
 	 	 	 	Toast.makeText(MainActivity.this, "Contact deleted", 
Toast.LENGTH_LONG).show(); 
 	 	 	listContact.clear(); 
 	 	 	new GetContacts().execute(); 
 	 	} else if (result.equals(Static.FAIL)) { 
Toast.makeText(MainActivity.this, "Fail to delete contact", 
Toast.LENGTH_LONG).show(); 
 	 	 	} 
 	 	 	 
 	 	} 
 	 
 	} 
 
 	@Override 
 	public boolean onCreateOptionsMenu(Menu menu) { 
 	 	getMenuInflater().inflate(R.menu.main, menu); 
 	 	return true;  	} 
 
} 

}
